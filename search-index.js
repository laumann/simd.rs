var searchIndex = {};
searchIndex['simd'] = {"items":[[0,"","simd","[Experimental] Generic programming with SIMD",null,null],[3,"f32x4","","",null,null],[3,"f64x2","","",null,null],[5,"sum","","Sum the elements of a slice using SIMD ops",null,null],[11,"add","","",0,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",0,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",0,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",0,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"cast","","",0,null],[11,"from_elem","","",0,{"inputs":[{"name":"f32x4"},{"name":"f32"}],"output":{"name":"f32x4"}}],[11,"zeroed","","",0,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"map","","",0,{"inputs":[{"name":"f32x4"},{"name":"f"}],"output":{"name":"f32x4"}}],[11,"sum","","",0,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32"}}],[11,"add","","",1,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",1,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",1,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",1,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"cast","","",1,null],[11,"from_elem","","",1,{"inputs":[{"name":"f64x2"},{"name":"f64"}],"output":{"name":"f64x2"}}],[11,"zeroed","","",1,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"map","","",1,{"inputs":[{"name":"f64x2"},{"name":"f"}],"output":{"name":"f64x2"}}],[11,"sum","","",1,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64"}}],[0,"traits","","Traits",null,null],[8,"Simd","simd::traits","Any type that can be SIMD accelerated",null,null],[16,"Vector","","The SIMD vector associated to this type",2,null],[8,"Vector","","SIMD vector",null,null],[16,"Elem","","Each element of the SIMD vector",3,null],[10,"cast","","Casts e.g. `&[f32]` into an *aligned* `&[f32x4]`, the elements that don't fit in the\naligned slice will be returned as a `&[f32]` slices.",3,null],[10,"from_elem","","Creates an SIMD vector that contains several copies of `elem`",3,{"inputs":[{"name":"vector"},{"name":"elem"}],"output":{"name":"self"}}],[10,"zeroed","","Creates an SIMD vector with all its elements set to zero",3,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[10,"map","","Maps each element of the SIMD vector",3,{"inputs":[{"name":"vector"},{"name":"f"}],"output":{"name":"self"}}],[10,"sum","","Returns the sum of all its elements",3,{"inputs":[{"name":"vector"}],"output":{"name":"elem"}}],[11,"fmt","simd","",0,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",1,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}]],"paths":[[3,"f32x4"],[3,"f64x2"],[8,"Simd"],[8,"Vector"]]};
initSearch(searchIndex);
